 


h4. Version 0.2.20 

* Added build-release target that assigns a build number and writes a release_info.groovy configuration file
* Added full name to authentication object, to facilitate showing within the UI
* Added explicit support for accept header within RESTful API
* Added workaround for Java/Hibernate/Gorm handling of dates and timestamps. The Java/Groovy 'equals' implementation is not symmetrical when dealing with dates (i.e., 'timestamp == date' is not the same as 'date == timestamp').  Unfortunately, Hibernate exposes timestamps within it's cache.  GORM 'isDirty' support uses this cache to determine if an object is dirty, but given the poor Java implementation this can lead to 'false positives'.  The workaround is, if a model is considered dirty, to check if the only dirty properties are 'dates' and if so to check them again (by reversing the order of the equality check).  
* Added support for 'horizon specific' menu
* Miscellaneous improvements and bug fixes

h4. Version 0.2.11 (and previous builds after 0.2.4)

* CodeNarc code quality analysis and reporting
* Cobertura code coverage instrumentation and reporting
* Bug fixes (Jira's not available)
* Modified Service callback methods (such that only one occurs before a save)
* Added documentation for 'Services' and 'REST'

h4. Version 0.2.4

* Introduces this documentation, which may be generated by using: 'grails Doc'
* Provides a 'message' closure for use within integration tests, akin to the one injected into controllers by Grails. 
* Provides an assertFieldErrorContent method to integration tests that facilitates asserting field error content within an ApplicationException

The 'message' closure and 'assertFieldErrorContent' method facilitate testing of services where ApplicationException exceptions are thrown.  Here is an example of their use within a service integration test:
{code}
try {
    sectionOlrRegistrationStatusService.create(map)
    fail "Should have failed with validation error on registration status"
}
catch (ApplicationException ae) {
    assertEquals 'ValidationException', ae.getType()
    def returnMap = ae.returnMap( message ) 

    assertTrue "Return map not as expected, but was: ${returnMap.message}",
               returnMap.message ==~ /.*The expected top level localized message.*/

    assertFieldErrorContent( returnMap.errors, 
                             [ fieldName: "registrationStatus", 
                               modelName: "com.sungardhe.banner.xxx.Registration", 
                               exactMessage: "The registration status is totally hosed, it should be x",
                               rejectedValue: "my_bad_status_code" ] )
}
{code} 


h4. Previous Versions

Documentation for previous releases of this plugin is external to the project. Please see the internal Confluence site for content. 
 