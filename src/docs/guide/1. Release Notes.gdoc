
h4. 0.2.37

* Config changes to replace myData with bannerData specific values
* Renamed config file to banner_configuration.groovy fro

h4. 0.2.34

* banner-core now supports both administrative and self service Banner.  An application instance may be configured to support administrative users, self service users, or both using configuration as follows:
{code}
/** *****************************************************************************
 *                                                                              *
 *                Self Service Endpoint Support Enablement                      *
 *                                                                              *
 ***************************************************************************** **/

// Set 'ssbEnabled' to true for instances that expose Self Service Banner endpoints. 
// If this is set to false, or if this configuration item is missing, the instance 
// will only support administrative users and not self service users. 
//
// If this is enabled, it is important to also ensure the corresponding configuration
// items for the SSB datasource are configured below. 
//
//ssbEnabled = true                   // default is 'false'
//administrativeBannerEnabled = true  // default is 'true' 
{code}
* Self service users may authenticate using spriden_id and pin.  
* If a self service user has an oracle database account, all database connections will be proxied for that user. (Note this is different from Banner 8 self service.)
* If a self service user does not have an oracle account, database connections are not proxied (and use a common self service user).

h4.  0.2.33

* The BannerDataSource (see BannerDS) can now set a session 'identifier' and the dbms_application_info 'module' and 'action'. 
** ServiceBase CRUD methods now set the 'module' and 'action' to facilitate tracking database connections within the database.
** BannerConnection now sets the identifier when it is created (i.e., when it wraps a connection being retrieved from the underlying dataSource)
* Added KeyBlockHolder as a mechanism to pass key block information to a service, outside of the service invocation. 
* Added 'setApiContext( String packageName, String contextName, String contextVal )' utility method to ServiceBase, to facilitate setting Banner database API context variables. 
* Banner General 8.4 SDE Support Validation
* Fixes for login/violation statistics


h4. Version 0.2.31

* DBEU support added in banner-core
* Implementation of menus changed to use banner menu instead of a custom menu
* Support added to capture login statistics and violations
* Modified getURL method in BannerDS for weblogic support

  h4. Version 0.2.29

* Added explicit support for using 'elvyx' [http://www.elvyx.com/] to monitor and profile SQL activity. This tool is very helpful in order to view bound SQL statements. For reference, here is a local configuration file that may be used (after setting the appropriate database url value).  To use elvyx, just uncomment the two elvyx configuration items.
{code}
// JNDI configuration for use in 'production' environment
myDataSource.jndiName = "jdbc/horizonDataSource"

// Local configuration for use in 'development' and 'test' environments
myDataSource.username = "banproxy"
myDataSource.password = "u_pick_it"	
myDataSource.driver = "oracle.jdbc.OracleDriver"
myDataSource.url = "jdbc:oracle:thin:@oracledb:1521:ban83" 

// Local configuration for using elvyx to view SQL statements that are bound. To enable this driver, simply uncomment the 
// elvyx driver and url below. Do NOT comment out the 'myDataSource.url' above -- it is still needed for the authentication data source.
// To use elvyx, download from "http://www.elvyx.com", unzip, and run from it's top-level directory: java -jar lib/elvyx-1.0.24.jar 
//
//elvyx.driver = "com.elvyx.Driver" 
//elvyx.url = "jdbc:elvyx://localhost:4448/?elvyx.real_driver=${myDataSource.driver}&elvyx.real_jdbc=${myDataSource.url}&user=${myDataSource.username}&password=${myDataSource.password}"
{code}


h4. Version 0.2.28

* ServiceBase now explicitly checks the optimistic lock, as models that are backed by views which employ triggers with instead of clauses for 'update' do not check the optimistic lock. Consequently, this change in ServiceBase ensures optimistic locking is functional for these models when using them in Horizon web applications.  (The Banner APIs should be modified to ensure optimistic lock checking when  'version' is included as part of the 'where' clause, so that other applications that use these APIs can benefit from optimistic locking without having to add an explicit check.)

h4. Version 0.2.27

* Added @DatabaseModifiesState annotation that should be used on domain model classes whose persistent state may be altered within the database. 
* Modified ServiceBase to perform an immediate refresh after creating and updating a model, if this annotation is present on the model. 
* Modified the AuditTrailPropertySupportHibernateListener Hibernate listener to strip the fractional seconds from 'lastModified' Date property in domain models, since this property is mapped to the SQL DATE type which does not support fractional seconds. This prevents false reporting of this property as being dirty when performing subsequent saves.  Also modified ServiceBase 'isDirty' checking to exclude 'lastModified' if the @DatabaseModifiesState is present on the model.  

h4. Version 0.2.26

* This is a Summit-only release, that updates the menu functionality for use at Summit.  

h4. Version 0.2.24

* Exposed logging via JMX, and adopted use of a rolling log file. 
* Renamed log file to include environment and application name
* Allow location of log file to be specified as a system property
* Fixed a bug pertaining to 'isDirty' when dealing with dates (a follow up to the workaround implemented in Version 0.2.20)


h4. Version 0.2.20 

* Added build-release target that assigns a build number and writes a release_info.groovy configuration file
* Added full name to authentication object, to facilitate showing within the UI
* Added explicit support for accept header within RESTful API
* Added workaround for Java/Hibernate/Gorm handling of dates and timestamps. The Java/Groovy 'equals' implementation is not symmetrical when dealing with dates (i.e., 'timestamp == date' is not the same as 'date == timestamp').  Unfortunately, Hibernate exposes timestamps within it's cache.  GORM 'isDirty' support uses this cache to determine if an object is dirty, but given the poor Java implementation this can lead to 'false positives'.  The workaround is, if a model is considered dirty, to check if the only dirty properties are 'dates' and if so to check them again (by reversing the order of the equality check).  
* Added support for 'horizon specific' menu
* Miscellaneous improvements and bug fixes

h4. Version 0.2.11 (and previous builds after 0.2.4)

* CodeNarc code quality analysis and reporting
* Cobertura code coverage instrumentation and reporting
* Bug fixes (Jira's not available)
* Modified Service callback methods (such that only one occurs before a save)
* Added documentation for 'Services' and 'REST'

h4. Version 0.2.4

* Introduces this documentation, which may be generated by using: 'grails Doc'
* Provides a 'message' closure for use within integration tests, akin to the one injected into controllers by Grails. 
* Provides an assertFieldErrorContent method to integration tests that facilitates asserting field error content within an ApplicationException

The 'message' closure and 'assertFieldErrorContent' method facilitate testing of services where ApplicationException exceptions are thrown.  Here is an example of their use within a service integration test:
{code}
try {
    sectionOlrRegistrationStatusService.create(map)
    fail "Should have failed with validation error on registration status"
}
catch (ApplicationException ae) {
    assertEquals 'ValidationException', ae.getType()
    def returnMap = ae.returnMap( message ) 

    assertTrue "Return map not as expected, but was: ${returnMap.message}",
               returnMap.message ==~ /.*The expected top level localized message.*/

    assertFieldErrorContent( returnMap.errors, 
                             [ fieldName: "registrationStatus", 
                               modelName: "com.sungardhe.banner.xxx.Registration", 
                               exactMessage: "The registration status is totally hosed, it should be x",
                               rejectedValue: "my_bad_status_code" ] )
}
{code} 


h4. Previous Versions

Documentation for previous releases of this plugin is external to the project. Please see the internal Confluence site for content. 
 