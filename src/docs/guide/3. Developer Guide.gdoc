
\\
\\
{note}This section is applicable only for internal SunGard Higher Education developers at this time.{note} 

This section pertains to developers who contribute to this plugin, versus developers who 'use' this plugin within their grails projects.  Information pertaining to usage of this plugin is provided within the [User's Guide|guide:user] section.  This section addresses building, testing, and releasing this plugin.  

This section includes external links that are accessible only within the SunGard Higher Education intranet. 

\\
\\
h3. Building and Testing the plugin locally

Since this is an internal plugin, the plugin project is hosted in an internal 'git' repository. You may clone this project as described  [here|http://confluence.sungardhe.com/display/banner/Horizon+Git+SCM].

Grails plugins are very similar to Grails applications, and follow much of the same conventions. A key difference in the banner-core plugin is how we test the plugin. Rather than simply having unit and integration tests, we use a full Grails application nested within the test directory of the plugin. This provides a number of advantages, as it ensures we test the plugin as it is installed into an application. We are also able, if necessary, to develop additional grails applications that perhaps use the plugin differently. Lastly, we don't have to exclude any artifacts (aka 'artefacts' in Grails lingo) - they are already excluded as they are under the test directory. _Note that other plugins may simply use unit/integration/functional tests versus a child 'grails application' for testing.  A separate application is used here as this is a 'horizontal framework' plugin.  Plugins that provide 'vertical' slices of functionality may likely not use a separate test application._

An important thing to remember is that although the test application (in the test/test-banner-core) directory is contained within the banner-core project, it is an independent Grails application. Why is this important? Say you do a 'grails clean' and 'grails compile' from your plugin's top directory and want to test. Before you do this, you should cd to the test/test-banner-core and run 'grails clean' prior to running 'grails test-app'. Since test-banner-core is a 'real' Grails application, it has it's own cached data within the .grails directory. You need to ensure you 'grails clean' the test application to delete content from it's .grails directory.

{code}
cd banner-core
grails clean
grails compile
cd test/test-banner-core/
grails clean 
grails test-app unit: integration
grails test-app functional:
{code}

Once all tests run successfully, you may be ready to push this to the origin/master in the git repository.  However, this is a judgement call - in many cases, it is prudent to further test the plugin by installing it into a larger project.  The simple test application used to test the plugin cannot assure that changes in the plugin will be functional within a 'real' project -- there are simply too many variables.   

The easiest way to test the plugin as used by another grails project, is to do so locally and directly.  To do this, simply 

{code}
cd banner-core
grails package-plugin
{code}

The above package-plugin script will create the plugin artifact within the target directory of the plugin project.  Now switch to the grails project into which you want to install the plugin, and install and test the plugin.

{code}
cd banner_on_grails
grails install-plugin ../banner_core/grails-banner-core-0.2.3.zip
grails clean
grails compile
grails test-app integration:
grails test-app functional:
{code}

If you believe tests are failing that should not fail, it may be that the caches need to be cleared.  If needed, you may do so by:
{code}
rm -R ~/.ivy2/cache/banner-core*
rm -R ~/.ivy2/cache/com.sungardhe/
rm -R ~/.grails/1.3.5/projects/banner_on_grails/plugin-classes/
rm -R ~/.grails/1.3.5/projects/banner_on_grails/plugins/banner-core*
{code}

When you have proven that the plugin is functional, and can be used within a larger project, you may push to git.  Before you do this, you should assess whether or not other projects (e.g., banner_on_grails) need the updated plugin. That is, you may push to git and decide not deploy to our Nexus maven repository - meaning that the framework is improved but not yet used by other projects. This does not require you to "release" the plugin. 

\\
h2. "Releasing" the Plugin

If other projects need the plugin changes, then the banner-core plugin must be deployed to our internal Nexus server. Before we do this, however, you'll need to update the version of the plugin (as we'll later want to bump up the version specified within the projects to match.

Note: Updating the version within the banner-core plugin unfortunately requires updating it in two places - this will hopefully be resolved shortly. For now, you must update the BannerCoreGrailsPlugin version field as well as the pom.xml file. (Once the Groovy DSL supporting plugin dependencies is fully functional, the pom.xml file will be removed.)

After setting the new version, you should follow the above steps to clean, compile, and test again. If everything is functional, push it to the origin/master. At this point you are ready to deploy the plugin to our Nexus server. Here is an example of how to do so:

{code}
grails package-plugin
grails maven-deploy --repository=releases
{code}

After deploying, you should visually inspect the Nexus server to ensure it is deployed. 

At this point, you should clear the caches again so that when you update a project to use this plugin it will be fetched from the Nexus server (versus simply being used from your cache).   This is important to test the project(s) that you update to use the new plugin version. 

Once you update a project, verify that the plugin is fetched from Nexus, clean/compile/test, you may commit those changes.  After doing so, anyone who checks out the project will see that the plugin is updated (fetched from Nexus) when they build the project. 

\\
\\
\\



