/** *****************************************************************************
 Â© 2011 SunGard Higher Education.  All Rights Reserved.

 CONFIDENTIAL BUSINESS INFORMATION

 THIS PROGRAM IS PROPRIETARY INFORMATION OF SUNGARD HIGHER EDUCATION
 AND IS NOT TO BE COPIED, REPRODUCED, LENT, OR DISPOSED OF,
 NOR USED FOR ANY PURPOSE OTHER THAN THAT WHICH IT IS SPECIFICALLY PROVIDED
 WITHOUT THE WRITTEN PERMISSION OF THE SAID COMPANY
 ****************************************************************************** */ 
 
 /** ****************************************************************************
 *                                                                              *
 *              Banner 9 'Test Banner Core' Local Configuration                 *
 *                                                                              *
 ***************************************************************************** **/

/*
This file contains configuration needed by the test application for the banner-core plugin, 
and serves as a guideline for Banner 9 module-specific configuration files. Note this 
file contains module-specific configuration whereas the 'banner_configuration.groovy' file 
contains cross-module (aka global) configuration items. 

Please refer to the administration guide for detailed explanations of the configuration items. 

This configuration file contains the following sections:

    * On-line Help Configuration
    
    * JMX Bean Names
    
    * Logging Configuration (Note: Changes here require restart -- use JMX to avoid the need restart)
    
    * Administrative Endpoint Support Enablement 
    
    * Self Service Endpoint Support Enablement 
     
    * CAS SSO Configuration (supporting administrative and self service users)
    
***************************************************************************** **/



/** ****************************************************************************
 *                                                                             *
 *                         On-Line Help Configuration                          *
 *                                                                             *
 *******************************************************************************/
//
onLineHelp.url = "http://m037075.sct.com:8080/bannerOH"



/** ****************************************************************************
 *                                                                             *
 *                              JMX Bean Names                                 *
 *                                                                             *
 *******************************************************************************/

// The names used to register Mbeans must be unique for all applications deployed 
// into the JVM.  This configuration should be updated for each instance of each 
// application to ensure uniqueness. 
jmx {
    exported {
        log4j = "tbcore-log4j"
    } 
}



/** ****************************************************************************
 *                                                                             *                 
 *                          Logging Configuration                              *
 *                                                                             *
 **************************************************************************** **/
//
// If we specify a 'logFileDir' as a system property, we'll write the file to that directory.
// Otherwise, we'll log to the target/logs directory.
String loggingFileDir = System.properties['logFileDir'] ? "${System.properties['logFileDir']}" : "target/logs"
String logAppName      = "test-banner-core"
String loggingFileName = "${loggingFileDir}/${logAppName}.log".toString()


// Note that logging is configured separately for each environment ('development', 'test', and 'production').
// By default, all 'root' logging is 'error'. level.  
//
// Note that if you change logging configuration directly in this file:
//   1) you will need to restart the application to see the changes, and
//   2) you may see an innocuous error during initialization indicating 'Cannot add new method [getLog]' 
//      (this error does not preclude successful logging and can be safely ignored).
//
// JMX may be used to modify logging levels for specific packages identified below. 
// Any JMX client, such as JConsole, may be used.
//
// The logging levels that may be configured are, in order: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF
//
log4j = {
    appenders {
        rollingFile name:'appLog', file:loggingFileName, maxFileSize:"${10*1024*1024}", maxBackupIndex:10, layout:pattern( conversionPattern: '%d{[EEE, dd-MMM-yyyy @ HH:mm:ss.SSS]} [%t] %-5p %c %x - %m%n' )
    }

    switch( environment?.toString() ) {
        case 'development':
            root {
                error 'stdout','appLog'
                additivity = true
            }
            info 'com.sungardhe.banner.configuration.ApplicationConfigurationUtils'
            error 'com.sungardhe.banner.representations'
            error 'com.sungardhe.banner.supplemental.SupplementalDataService'
            break
        case 'test':
            root {
                error 'stdout','appLog'
                additivity = true
            }
            info 'com.sungardhe.banner.configuration.ApplicationConfigurationUtils'
            break
        case 'production':
            root {
                error 'appLog'
                additivity = true
            }
            info 'com.sungardhe.banner.configuration.ApplicationConfigurationUtils'
            info 'com.sungardhe.banner.representations'
            info 'com.sungardhe.banner.supplemental.SupplementalDataService'
            error 'grails.app.service'
            error 'grails.app.controller'
            break
    }

    // Log4j configuration notes:
    // The following are some common packages that you may want to enable for logging in the section above.
    // You may enable any of these within this file (which will require a restart),
    // or you may add these to a running instance via JMX.
    //
    // Note that settings for specific packages/artifacts will override those for the root logger.
    // Setting any of these to 'off' will prevent logging from that package/artifact regardless of the root logging level.

    // ******** non-Grails classes (e.g., in src/ or grails-app/utils/) *********
    off 'com.sungardhe.banner.student'
    off 'com.sungardhe.banner.student.generalstudent'
    off 'com.sungardhe.banner.student.catalog'
    off 'com.sungardhe.banner.student.system'
    off 'com.sungardhe.banner.ui.zk.composers'
    off 'com.sungardhe.banner.service'
    
    off 'com.sungardhe.banner.testing' // Foo controller etc. 

    // ******** Grails framework classes *********
    off 'org.codehaus.groovy.grails.web.servlet'        // controllers
    off 'org.codehaus.groovy.grails.web.pages'          // GSP
    off 'org.codehaus.groovy.grails.web.sitemesh'       // layouts
    off 'org.codehaus.groovy.grails.web.mapping.filter' // URL mapping
    off 'org.codehaus.groovy.grails.web.mapping'        // URL mapping
    off 'org.codehaus.groovy.grails.commons'            // core / classloading
    off 'org.codehaus.groovy.grails.plugins'            // plugins
    off 'org.codehaus.groovy.grails.orm.hibernate'      // hibernate integration
    off 'org.springframework'                           // Spring IoC
    off 'org.hibernate'                                 // hibernate ORM
    off 'grails.converters'                             // JSON and XML marshalling/parsing

    // ******* Security framework classes **********
    off 'com.sungardhe.banner.security'
    off 'com.sungardhe.banner.db'
    
    off 'com.sungardhe.banner.security.AccessControlFilters'
    off 'com.sungardhe.banner.security.BannerAccessDecisionVoter'
    off 'com.sungardhe.banner.security.BannerAuthenticationProvider'
    off 'com.sungardhe.banner.security.CasAuthenticationProvider'
    off 'com.sungardhe.banner.security.SelfServiceBannerAuthenticationProvider'
    off 'grails.plugins.springsecurity'
    off 'org.springframework.security'
    
    off 'org.apache.http.headers'
    off 'org.apache.http.wire'

    // Grails provides a convenience for enabling logging within artefacts, using 'grails.app.XXX'.
    // Unfortunately, this configuration is not effective when 'mixing in' methods that perform logging.
    // Therefore, for controllers and services it is recommended that you enable logging using the controller
    // or service class name (see above 'class name' based configurations).  For example:
    //     all  'com.sungardhe.banner.testing.FooController' // turns on all logging for the FooController
    //
    // debug 'grails.app' // apply to all artefacts
    // debug 'grails.app.<artefactType>.ClassName // where artefactType is in:
    //                   bootstrap  - For bootstrap classes
    //                   dataSource - For data sources
    //                   tagLib     - For tag libraries
    //                   service    // Not effective with mixins -- see comment above
    //                   controller // Not effective with mixins -- see comment above
    //                   domain     - For domain entities

} // end log4j




/** *****************************************************************************
 *                                                                              *
 *               Administrative Endpoint Support Enablement                     *
 *                                                                              *
 ***************************************************************************** **/

// Disabling 'administrativeBannerEnabled' (setting to 'false') will prevent the 
// BannerAuthenticationProvider from attempting to authenticate users. 
//
administrativeBannerEnabled = true  // default is 'true' 



/** *****************************************************************************
 *                                                                              *
 *                Self Service Endpoint Support Enablement                      *
 *                                                                              *
 ***************************************************************************** **/

// Set 'ssbEnabled' to true for instances that expose Self Service Banner endpoints. 
// If this is set to false, or if this configuration item is missing, the instance 
// will only support administrative users and not self service users. 
//
// If this is enabled, it is important to also ensure the corresponding configuration
// items for the SSB datasource are configured below. 
//
// IMPORTANT: It is imperative the self-service datasource be configured if 'ssbEnabled = true'.
//
ssbEnabled = true // default is 'false'

// Set 'ssbOracleUsersProxied = true' to ensure that database connections are proxied 
// when the user has an oracle account.  This allows FGAC even for SSB pages. 
// Set this to false to instead use database connections that are established 
// for SSB users who do not have Oracle database accounts.  This setting applies 
// only to SSB pages. 
ssbOracleUsersProxied = true

// Enable this if guest or proxy authentication is desired. This will cause the 
// SelfServiceAuthenticationProvider to attempt authentication for 'non-PIDM' users. 
//
guestAuthenticationEnabled = false // default is false

// Default web session timeout for self-service users, when not overriden by a web role
//
defaultWebSessionTimeout = 1800	// in seconds, so 1800 = 1/2 hour



/** ****************************************************************************
 *                                                                              *
 *              Transaction timeout Configuration (in seconds)                  *
 *                                                                              *
 ***************************************************************************** **/
 
banner.transactionTimeout = 30



// ******************************************************************************
//
//                       +++ CAS CONFIGURATION +++
//
// ******************************************************************************
banner {
    sso {
        authenticationProvider           = 'default' //  Valid values are: 'default', 'cas'
        authenticationAssertionAttribute = 'udcId'
        //excludedUrlPattern               = 'guest' // URLs having this will not use SSO
    }
}

grails {
    plugins {
        springsecurity {
            cas {
                serverUrlPrefix  = 'http://m037075.sungardhe.com:9191/cas'
                serviceUrl       = 'http://localhost:8080/test-banner-core/j_spring_cas_security_check'
                serverName       = 'http://localhost:8080'
                proxyCallbackUrl = 'http://localhost:8080/test-banner-core/secure/receptor'

                loginUri           = '/login'
                sendRenew          = false
                proxyReceptorUrl   = '/secure/receptor'
                useSingleSignout   = true                
                key                = 'grails-spring-security-cas'
        		artifactParameter  = 'ticket'
        		serviceParameter   = 'service'
        		filterProcessesUrl = '/j_spring_cas_security_check'
            }
        }
    }
}

